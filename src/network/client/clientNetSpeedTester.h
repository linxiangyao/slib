#ifndef S_CLIENT_NET_SPEED_TESTER_H_
#define S_CLIENT_NET_SPEED_TESTER_H_
#include "clientComm.h"
SCLIENT_NAMESPACE_BEGIN



// test send pack to svr and recv pack speed
class ClientNetSpeedTester : public IMessageHandler
{
private:
	~ClientNetSpeedTester();

public:
	enum EMsgType
	{
		EMsgType_onTestStart,
		EMsgType_onOneSvrResultUpdate,		// (std::string svr_ip_or_name, uint32_t svr_port, bool is_connected, uint64_t send_bytes_per_second, uint64_t recv_bytes_per_second)
		EMsgType_onTestEnd,
	};
	class SvrInfo
	{
	public:
		std::string m_svr_ip_or_name;
		uint32_t m_svr_port;
		Binary m_send_pack_head;
		uint32_t m_send_pack_body_len; // send body will be generated by tester
		uint32_t m_send_count;
		uint32_t m_recv_pack_len;      // head + body len, the coneten will be ignored
	};
	class InitParam
	{
	public:
		InitParam() {
			m_sapi = NULL; m_work_looper
				= NULL; m_notify_looper = NULL; m_notify_target = NULL;
		}
		ITcpSocketCallbackApi* m_sapi;
		MessageLooper* m_work_looper;
		MessageLooper* m_notify_looper;
		void* m_notify_target;
		std::vector<SvrInfo> m_svr_infos;
	};
	
	class TestResult
	{
	public:
		TestResult() { m_svr_port = 0; m_send_bytes_per_second = 0; m_recv_bytes_per_second = 0; m_is_connected = false; }
		std::string m_svr_ip_or_name;
		uint32_t m_svr_port;
		uint64_t m_send_bytes_per_second;
		uint64_t m_recv_bytes_per_second;
		bool m_is_connected;
	};

	static bool parseTestResultFromMsg(TestResult* r, Message* msg);

	ClientNetSpeedTester();
	bool init(const InitParam& param);
	bool start();
	void stop();



private:
	enum __EClientConncectState
	{
		__EClientConncectState_connecting,
		__EClientConncectState_connected,
		__EClientConncectState_disconnected,
	};
	class __ClientCtx
	{
	public:
		__ClientCtx() { m_sid = 0; m_send_bytes_per_second = 0; m_recv_bytes_per_second = 0; m_connect_state = __EClientConncectState_disconnected; }
		SvrInfo m_svr_info;
		socket_id_t m_sid;
		uint64_t m_send_bytes_per_second;
		uint64_t m_recv_bytes_per_second;
		__EClientConncectState m_connect_state;
	};

	// IMessageHandler
	virtual void onMessage(Message * msg, bool* isHandled);
	void __onMessage_clientConnected(const ITcpSocketCallbackApi::ClientSocketConnectedMsg& msg);
	void __onMessage_clientDisconnected(const ITcpSocketCallbackApi::ClientSocketDisconnectedMsg& msg);

	void __stop();
	void __postMsgToTarget(Message* msg);
	int __getClientCtxIndexBySid(socket_id_t sid);

	bool m_is_running;
	Mutex m_mutex;
	InitParam m_init_param;
	std::vector<__ClientCtx*> m_client_ctx_vector;
};


SCLIENT_NAMESPACE_END
#endif